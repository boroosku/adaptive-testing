import streamlit as st
import time

st.set_page_config(page_title="–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", layout="centered")
st.title("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –û–ê–∏–ü")

# --- –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
adaptive_test = [
    {
        "id": "Q1",
        "topic": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –±–ª–æ–∫-—Å—Ö–µ–º—ã",
        "level": "üü¢",
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–ª–≥–æ—Ä–∏—Ç–º?",
        "options": ["–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
                    "–ù–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É",
                    "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π, –ø—Ä–∏–≤–æ–¥—è—â–∞—è –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ"],
        "correct": 2,
        "next_if_correct": "Q2",
        "next_if_wrong": "Q3"
    },
    {
        "id": "Q2",
        "topic": "–°–æ—Å—Ç–∞–≤ —è–∑—ã–∫–∞ C",
        "level": "üü°",
        "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ `#define` –≤ —è–∑—ã–∫–µ –°–∏?",
        "options": ["–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é",
                    "–ó–∞–º–µ–Ω—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ",
                    "–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
                    "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"],
        "correct": 1,
        "next_if_correct": "Q4",
        "next_if_wrong": "Q5"
    },
    {
        "id": "Q3",
        "topic": "–°–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è",
        "level": "üü¢",
        "question": "–ß–µ–º—É —Ä–∞–≤–Ω–æ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ 1011 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
        "options": ["11", "9", "12", "13"],
        "correct": 0,
        "next_if_correct": "Q5",
        "next_if_wrong": "Q6"
    },
    {
        "id": "Q4",
        "topic": "–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
        "level": "üî¥",
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ–æ–Ω –ù–µ–π–º–∞–Ω–∞?",
        "options": ["–°—Ö–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
                    "–ú–æ–¥–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–º–µ—Å—Ç–µ",
                    "–¢–∏–ø –ø–∞–º—è—Ç–∏",
                    "–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"],
        "correct": 1,
        "next_if_correct": "Q7",
        "next_if_wrong": "Q6"
    },
    {
        "id": "Q5",
        "topic": "–¶–∏–∫–ª—ã –∏ —É—Å–ª–æ–≤–∏—è",
        "level": "üü°",
        "question": "–ö–∞–∫–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ü–∏–∫–ª–∞ —Å –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏–µ–º –≤ C?",
        "options": ["for", "repeat", "do", "while"],
        "correct": 3,
        "next_if_correct": "Q7",
        "next_if_wrong": "Q6"
    },
    {
        "id": "Q6",
        "topic": "–ú–∞—Å—Å–∏–≤—ã",
        "level": "üü°",
        "question": "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 10 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ C?",
        "options": ["int arr[10];", "int[10] arr;", "arr int[10];", "array<int> arr;"],
        "correct": 0,
        "next_if_correct": "Q8",
        "next_if_wrong": "Q8"
    },
    {
        "id": "Q7",
        "topic": "–®–∞–±–ª–æ–Ω—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å",
        "level": "üî¥",
        "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–ø–∏—Å—å O(n log n)?",
        "options": ["–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞ n",
                    "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ",
                    "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å",
                    "–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ"],
        "correct": 3,
        "next_if_correct": "Q9",
        "next_if_wrong": "Q8"
    },
    {
        "id": "Q8",
        "topic": "–°—Ç—Ä–æ–∫–∏",
        "level": "üü°",
        "question": "–ö–∞–∫ –≤ C –æ–±—ä—è–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É 'hello'?",
        "options": ['char str[] = "hello";', "string str = 'hello';", "char str = hello;", "str = char['hello'];"],
        "correct": 0,
        "next_if_correct": "Q9",
        "next_if_wrong": "Q9"
    },
    {
        "id": "Q9",
        "topic": "–£–∫–∞–∑–∞—Ç–µ–ª–∏",
        "level": "üî¥",
        "question": "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –Ω—É–ª–µ–≤–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è `int *p = NULL; *p;`?",
        "options": ["–í–µ—Ä–Ω—ë—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ 0", "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∑–∞–º–µ–Ω–∏—Ç –Ω–∞ 0",
                    "–ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (segmentation fault)", "–ü–∞–º—è—Ç—å –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞"],
        "correct": 2,
        "next_if_correct": None,
        "next_if_wrong": None
    }
]

if "started" not in st.session_state:
    st.session_state.started = False
if "current_id" not in st.session_state:
    st.session_state.current_id = "Q1"
    st.session_state.score = 0
    st.session_state.knowledge = {}
    st.session_state.just_answered = False
    st.session_state.start_time = 0


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ---
def show_question(q):
    #st.markdown(f"### –¢–µ–º–∞: {q['topic']} | –£—Ä–æ–≤–µ–Ω—å: {q['level']}")

    col1, col2 = st.columns([4, 1])  # –®–∏—Ä–æ–∫–∏–π –±–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ —É–∑–∫–∏–π ‚Äî –¥–ª—è —Ç–∞–π–º–µ—Ä–∞

    with col1:
        st.markdown(f"### –¢–µ–º–∞: {q['topic']} | –£—Ä–æ–≤–µ–Ω—å: {q['level']}")
        st.write(q["question"])
    
    with col2:
        elapsed = int(time.time() - st.session_state.start_time)
        minutes, seconds = divmod(elapsed, 60)
        st.markdown(f"‚è± **{minutes:02d}:{seconds:02d}**")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    answer_key = f"answer_{q['id']}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç
    already_answered = st.session_state.get("just_answered", False)

    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, radio –∞–∫—Ç–∏–≤–Ω–æ
    selected = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        q["options"],
        key=answer_key,
        disabled=already_answered
    )

    if not already_answered and st.button("–û—Ç–≤–µ—Ç–∏—Ç—å", key="btn_" + q["id"]):
        correct = (q["options"].index(selected) == q["correct"])
        st.session_state.knowledge[q["topic"]] = "‚úÖ" if correct else "‚ùå"
        st.session_state.last_answer_correct = correct
        st.session_state.just_answered = True
        if correct:
            st.session_state.score += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.session_state.last_question_id = q["id"]
        st.rerun()  # –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç

    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if already_answered and st.session_state.get("last_question_id") == q["id"]:
        if st.session_state.last_answer_correct:
            st.success("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è"):
            st.session_state.current_id = (
                q["next_if_correct"] if st.session_state.last_answer_correct
                else q["next_if_wrong"]
            )
            st.session_state.just_answered = False
            st.session_state.last_question_id = None
            st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
question_map = {q["id"]: q for q in adaptive_test}
if not st.session_state.started:
    st.markdown("## üß™ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")
    st.write("""
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!

    **–¶–µ–ª—å:** –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏, —è–∑—ã–∫–∞ C –∏ –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö.

    –í–æ–ø—Ä–æ—Å—ã –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    ‚ö†Ô∏è –û—Ç–≤–µ—á–∞—Ç—å –º–æ–∂–Ω–æ **—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑** –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.

    ‚è± –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.
    """)
    if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
        st.session_state.started = True
        st.session_state.start_time = time.time()
        st.rerun()
elif st.session_state.current_id:
    show_question(question_map[st.session_state.current_id])
else:
    st.markdown("## üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    for topic, result in st.session_state.knowledge.items():
        st.write(f"**{topic}**: {result}")
    st.write(f"**–ò—Ç–æ–≥**: {st.session_state.score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len(st.session_state.knowledge)}")
    elapsed_time = int(time.time() - st.session_state.start_time)
    minutes, seconds = divmod(elapsed_time, 60)
    st.write(f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")

    if st.button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        st.session_state.current_id = "Q1"
        st.session_state.score = 0
        st.session_state.knowledge = {}
        st.session_state.just_answered = False
        st.session_state.start_time = time.time()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç
        st.rerun()
